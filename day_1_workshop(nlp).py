# -*- coding: utf-8 -*-
"""Day 1 workshop(NLP).ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/151VXjk4SaN17HyJRB8RF1APL-jG1nRcx
"""

print("Hello world")

y = 2
type(y)

import numpy as np
arr = np.array([1,2,3])
arr.dtype

a = input('Enter the number')

d = float(input('Enter the dollar($)'))
r = d * 85
print(f'${d} is equivalent to ₹{r}')

d = int(input("Enter the dol:"))
r = d*85
print(r)

"""Arithmetic Operations using format string"""

a = int(input('Enter the number:'))
b = int(input('Enter the number'))
print(f'Addition of {a} and {b} : {a+b}')
print(f'Subtraction: {a-b}')
print(f'Multiplication: {a*b}')
print(f'Division: {a/b}')

n = int(input("Number:"))
if n%2 == 0:
  pass

n = int(input("Number:"))
if n%2 == 0:
  print(f'Number{n} is an even')

n = int(input("Number:"))
if n%2 == 0:
  print(f'Number{n} is an even')

n = int(input('Number:'))
if n%2 == 0:
  print(f'Number{n} is an even')
else:
  print(f'Number{n} is odd')

n = int(input('Enter a number'))
m = int(input('Enter a number'))
if n>m:
  print(f'Number {n} is greater than {m}')
elif n<m:
  print(f'Number {n} is lesser than {m}')
else:
  print(f'Number {n} and {m} are equal')

n = int(input('Enter a number'))
m = int(input('Enter a number'))
if n!=m:
  if n<m:
    print(f'{n} lesser than {m}')
  else:
    print(f'{n} greater than {m}')
else:
  print(f'Number {n} and {m} are equal')

age = (input('Enter the age:'))
if type(age)==str:
  print('Invalid input')
elif age>=18:
  print(f'The age {age} is eligible for voting')
else:
  print('Age is not eligible')

name = input("Enter name:")
age = int(input('Enter the age:'))
citizen = input('Are you indian(yes/no)')
id = input('Do you have valid id(yes/no)')
try:
  if age<0:
    print('Please enter valid age (>0)')
  else:
    if (age>17 and citizen == 'yes' and id == 'yes'):
      print(f' {name} is eligible for voting')
    elif (age<18 or citizen == 'no' or id == 'no'):
      print(f'{name} is not eligible for voting')
except:
  print('Error: Please enter valid input')

m = int(input('Enter the marks: '))
try:
  if m>=90 and m<=100:
    print('Grade obtained: A+')
  elif m>=80 and m<90:
    print('Grade obtained: A')
  elif m>=70 and m<80:
    print('Grade obtained: B+')
  elif m>=60 and m<70:
    print('Grade obtained: B')
  elif m>=50 and m<60:
    print('Grade obtained: C+')
  elif m>=40 and m<50:
    print('Grade obtained: C')
  elif m>=35 and m<40:
    print('You have just passed, and Grade obtained: P')
  else:
    print('Exam failed, Grade : F')
except:
   print('Error: Please enter valid input')

"""**Functions**"""

def user_name(name):
  print('Drushya')

def calc(a,b,op):
  if op == '+':
    return a+b
  elif op == '-':
    return a-b
  elif op == '*':
    return a * b
  elif op == '/':
    return a//b
  elif op == '**':
    return a**b
  else:
    print('Invalid Operator')

a = int(input('Enter the number:'))
b = int(input('Enter the number:'))
op = input('Enter the operator:(+,-,*,/,**)')
calc(a, b, op)

def is_palindrome(w):
  w = w.replace(" ", "").lower()
  return w == w[::-1]
w = input("Enter a word:")
if is_palindrome(w):
  print(f'{w} is palindrome')
else:
  print(f'{w} is not palindrome')

w = input("Enter a word:")
if w == w[ : :-1]:
 print(f'{w} is palindrome')
else:
  print(f'{w} is not palindrome')

"""# **Loops**"""

n = 10
while True:
  print(n)
  n = n-1
  if n<0:
    break
print('End')

n = 10
while True:
  print(n, end=' ')
  n = n-1
  if n<0:
    break
print('End')

w = input('Enter input statement')
while True:
  print(w)
  if w == 'Word':
    break
print('End')

while True:
  w = input('Enter input statement:')
  print(w)
  if w == 'Word':
    break
print('End')

while True:
  password = input("Enter the password: ")
  if password == 'drushya':
    print("Logged in succefully")
    break

while True:
  password = input("Enter the password: ")
  if password == 'drushya':
    print("Logged in succefully")
    break
  else:
    print("Incorrect password")

import random

p1 = input('Enter first person name: ')
p2 = input('Enter 2nd person name: ')
lc = random.randint(0, 100)
print(f'The love percentage between {p1} and {p2} is {lc}%')

"""# **Website creation using gradio**"""

pip install gradio

import gradio as gr

pip install gtts #text to speech

from gtts import gTTS

def love_calc(x, y):
  lp = random.randint(0, 100)
  result = f'The love percentage between {x} and {y} : {lp}%'

  t = gTTS(result)
  audio = 'result.mp3'
  t.save(audio)

  return result, audio

love_calc = gr.Interface(
    fn=love_calc,
    inputs = [gr.Textbox(label='First Person'), gr.Textbox(label = 'Second Person')],
    outputs=[gr.Textbox('Love Percentage'), gr.Audio(label='Audio Result')],
    title='Love Calculator'
)
love_calc.launch()

import random
from gtts import gTTS
import gradio as gr

def love_calc(x, y):
    lp = random.randint(0, 100)
    result = f'{x} ಮತ್ತು {y} ನಡುವಿನ ಪ್ರೀತಿ ಶೇಕಡಾವಾರು: {lp}%'

    t = gTTS(result, lang='kn')
    audio = 'result.mp3'
    t.save(audio)

    return result, audio

interface = gr.Interface(
    fn=love_calc,
    inputs=[gr.Textbox(label='First Person'), gr.Textbox(label='Second Person')],
    outputs=[gr.Textbox(label='Love Percentage'), gr.Audio(label='Audio Result')],
    title='Love Calculator (Kannada)'
)

interface.launch()

"""# **Program w.r.t ATM working process**"""

balance = 2000  # minimum balance

while True:
    print('GAT AIML ATM')
    print('1. Check balance')
    print('2. Money deposit')
    print('3. Money withdrawal')
    print('4. Exit')

    choice = input('Enter your choice (1/2/3/4): ')
    if choice == '1':
        print(f'Current balance is ₹{balance}')
    elif choice == '2':
        deposit_amount = float(input('Enter an amount that is to be deposited: '))
        if deposit_amount > 0:
            balance += deposit_amount
            print(f'₹{deposit_amount} is deposited. The current balance is ₹{balance}')
        else:
            print("Invalid deposit. Please enter a correct amount (>0)")
    elif choice == '3':
        with_amount = float(input('Enter the money to withdraw: '))
        if with_amount > 0:
            if with_amount <= balance:
                balance -= with_amount
                print(f'₹{with_amount} is withdrawn. The current balance is ₹{balance}')
            else:
                print("Insufficient balance")
        else:
            print("Invalid withdrawal amount. Please enter a correct amount (>0)")
    elif choice == '4':
        print("Thank you for choosing this ATM")
        break
    else:
        print('Invalid choice! Please choose a correct option (1/2/3/4)')

"""# **Website using gradio for ATM**"""

import gradio as gr

balance = {"amount": 2000}
def atm_app(action, amount):
    if action == "Check Balance":
        return f"Current balance is ₹{balance['amount']}"

    elif action == "Deposit":
        if amount is None or amount <= 0:
            return "Invalid deposit. Please enter a correct amount (>0)"
        balance['amount'] += amount
        return f"₹{amount} is deposited. The current balance is ₹{balance['amount']}"

    elif action == "Withdraw":
        if amount is None or amount <= 0:
            return "Invalid withdrawal amount. Please enter a correct amount (>0)"
        if amount > balance['amount']:
            return "Insufficient balance"
        balance['amount'] -= amount
        return f"₹{amount} is withdrawn. The current balance is ₹{balance['amount']}"

    elif action == "Exit":
        return "Thank you for using GAT AIML ATM!"

    return "Invalid choice!"

interface = gr.Interface(
    fn=atm_app,
    inputs=[
        gr.Radio(choices=["Check Balance", "Deposit", "Withdraw", "Exit"], label="Choose Action"),
        gr.Number(label="Enter Amount (if applicable)", precision=2)
    ],
    outputs=gr.Textbox(label="Result"),
    title="GAT AIML ATM Machine",
    description="Simulated ATM: Check balance, deposit, withdraw money."
)

interface.launch()

"""**Age Calculator**"""

from datetime import datetime

def calculate_age(birthdate):
    today = datetime.today()
    age = today.year - birthdate.year


    if (today.month, today.day) < (birthdate.month, birthdate.day):
        age -= 1

    return age


dob_input = input("Enter your date of birth (YYYY-MM-DD): ")

try:
    birthdate = datetime.strptime(dob_input, "%Y-%m-%d")
    age = calculate_age(birthdate)
    print(f"You are {age} years old.")
except ValueError:
    print("Invalid date format. Please enter in YYYY-MM-DD format.")